// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ImageStore {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  image Json?
}

model User {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  fullName              String?
  userName              String            @unique
  email                 String            @unique
  password              String?
  country               String?
  city                  String?
  industryName          String?
  address               String?
  number                String?
  image                 String?
  description           String?
  language              String?
  role                  Role              @default(USER) // Set a default role, if needed
  otp                   Int?              @default(0)
  forgetPasswordToken   String?
  forgetPasswordExpires Int?
  createdAt             DateTime          @default(now())
  updateAt              DateTime          @updatedAt
  SocialMediaLinks      SocialMediaLinks?
  contactForChat        contactForChat[]
  totalOrder            Int?              @default(0)
  QuickResponse         QuickResponse[]
  lastSeen              DateTime?
  book_mark             Boolean           @default(false)
  archive               Boolean           @default(false)
  block_for_chat        Boolean           @default(false)
  affiliateId           String?

  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")
  contactForChatId String?        @db.ObjectId
  Notification     Notification[]
  Order            Order[]
  Note             Note[]
  Payment          Payment[]

  OrderMessageSent     OrderMessage[]  @relation("OrderMessageSent")
  OrderMessageReceived OrderMessage[]  @relation("OrderMessageReceived")
  Affiliate            Affiliate[]
  review               review[]
  AffiliateJoin        AffiliateJoin[]

  @@map("Users")
}

model Affiliate {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  amount Float  @default(0)
  clicks Int    @default(0)
  link   String @unique

  paymentMethod String?
  paymentDate   DateTime?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  AffiliateJoin AffiliateJoin[]
}

model AffiliateJoin {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  affiliateLink String
  affiliate     Affiliate @relation(fields: [affiliateLink], references: [link])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderMessage {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userImage       String?
  senderName      String?
  senderUserName  String?
  projectNumber   String
  senderId        String   @db.ObjectId
  recipientId     String   @db.ObjectId
  messageText     String?
  attachment      Json[]   @default([])
  createdAt       DateTime @default(now())
  isFromAdmin     Role?
  customOffer     Json?
  timeAndDate     DateTime @default(now())
  contactForm     Json?
  read            Boolean  @default(false) // To track if the message has been read
  hiddenFromAdmin Boolean  @default(false)
  replyTo         Json?
  commonKey       String
  isCancelled     Boolean  @default(false)
  unseend         Boolean  @default(false)
  // Relationships
  sender          User     @relation("OrderMessageSent", fields: [senderId], references: [id])
  recipient       User     @relation("OrderMessageReceived", fields: [recipientId], references: [id])
  order           Order    @relation(fields: [projectNumber], references: [projectNumber])

  @@map("OrderMessages")
}

model Notification {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  senderLogo     String?
  type           String
  senderUserName String
  isOnline       Boolean @default(false)

  deletedForSender    Boolean @default(false)
  deletedForRecipient Boolean @default(false)

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  recipientId String @db.ObjectId
  recipient   User   @relation(fields: [recipientId], references: [id])

  messageId String?  @unique @db.ObjectId
  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("Notifications")
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userImage      String?
  senderName     String?
  senderUserName String?
  senderId       String   @db.ObjectId
  recipientId    String   @db.ObjectId
  messageText    String?
  attachment     Json[]   @default([])
  createdAt      DateTime @default(now())
  isFromAdmin    Role?
  customOffer    Json?
  timeAndDate    String
  contactForm    Json?
  commonkey      String
  seen           Boolean  @default(false)
  // new added
  replyTo        Json?
  // New field to track if the message has been read
  read           Boolean  @default(false)

  hiddenFromAdmin Boolean @default(false)

  sender       User          @relation("SentMessages", fields: [senderId], references: [id])
  recipient    User          @relation("ReceivedMessages", fields: [recipientId], references: [id])
  Notification Notification?

  @@map("Messages")
}

model contactForChat {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?
  website        String?
  exampleDesign  Json?
  messageText    String?
  senderUserName String?
  userImage      String?
  senderName     String?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model QuickResponse {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@map("quick_response")
}

model SocialMediaLinks {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  facebook  String?
  instagram String?
  linkedin  String?
  twitter   String?
  pinterest String?
  google    String?
  tumblr    String?
  youtube   String?
  yelp      String?
  tiktok    String?
  nextdoor  String?
  userId    String  @unique @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@map("SocialMediaLinks")
}

model CreateOfferProject {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  projectImage            Json?
  originalAmount          String?
  offerAmount             String?
  delivery                String?
  extraFastDelivery       String?
  extraFastDeliveryAmount String?
  bullPoints              String[] @default([])
  requirements            String[] @default([])

  freeDesignName        String
  freeDesignTypographys String[] @default([])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  designs Json[] @default([])

  @@map("CreateOfferProject")
}

model Category {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  categoryName String        @unique
  image        Json?
  bulletPoint  String[]      @default([])
  requirements String[]      @default([])
  subCategory  subCategory[]
  createdAt    DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  order        Int

  @@map("Categorys")
}

model subCategory {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  subTitle            String?
  subAmount           String?
  regularDeliveryDays String?
  fastDeliveryDays    String?
  fastDeliveryPrice   String?
  categoryId          String  @db.ObjectId

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  category  Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Restrict)
}

model UploadDesign {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String

  category    String
  subCategory String

  size           String
  fileFormat     String
  images         Json[]
  tags           String[] @default([])
  relatedDesigns String[] @default([])
  createdAt      DateTime @default(now())
  updateAt       DateTime @updatedAt

  folder String?

  subFolder String?

  industrys String[]

  designs  String[]
  designId String   @unique
}

//Start - Here You will get the schema for home page feature category reordering

model FeatureAllFolder {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  slug   String @unique
  folder String
  order  Int
}

model AllSubFolder {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  slug       String @unique
  folder     String
  subFolders Json[] @default([])
}

model AllDesigns {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  slug  String @unique
  order Int
}

//End - Here You will get the schema for home page feature category reordering

model Folders {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name       String       @unique
  subFolders SubFolders[]
  createdAt  DateTime     @default(now())
  updateAt   DateTime     @updatedAt
}

model SubFolders {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name      String   @unique
  folderId  String   @db.ObjectId
  folder    Folders  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Industrys {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name      String[]
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Designs {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name      String[]
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model desigserialNumberGenerator {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  serialnumber String?  @unique
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
}

model projectSerialNumberGenerator {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  serialnumber String?  @unique
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
}

model MultiProject {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  projectTitle String
  projectImage Json // Use Json to store image metadata
  requirements String[] // This will be stored as an array of strings
}

model Note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  content   Json?
  createdAt DateTime @default(now())
}

model review {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id])

  orderId String @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id])

  message  String
  userName String?

  thumbnail          String?
  thumbnailWatermark String?
  isThumbnail        Boolean? @default(true)

  rating     Int
  senderType senderType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                       String                  @id @map("_id") @db.ObjectId
  userId                   String                  @db.ObjectId
  stripeId                 String                  @unique
  user                     User                    @relation(fields: [userId], references: [id])
  projectName              String
  orderFrom                String?
  from                     String?
  projectNumber            String                  @unique
  duration                 String?
  totalPrice               String
  paymentStatus            PaymentStatus           @default(PENDING)
  startDate                DateTime?
  deliveryDate             DateTime?
  durationHours            String?
  projectStartDate         DateTime?
  projectStatus            ProjectStatus           @default(Waiting)
  projectType              ProjectType
  projectImage             String?
  completedDate            DateTime?
  trackProjectStatus       trackProjectStatus      @default(PENDING)
  clientApproval           Boolean?                @default(false)
  adminDeliveryRequest     Boolean?                @default(false)
  submittedData            Json?                   @default("{}")
  items                    Json[]                  @default([])
  requirements             Json[]                  @default([])
  isRequirementsFullFilled Boolean?                @default(false)
  bulletPoints             Json[]                  @default([])
  privateNotes             Note[]
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  Payment                  Payment[]
  OrderToken               String                  @unique
  totalQuantity            String?
  OrderMessage             OrderMessage[]
  OrderExtensionRequest    OrderExtensionRequest[]
  designerName             String?                 @default("")
  projectTips              Json?
  tags                     tags?                   @relation("OrderToTags", fields: [tagsId], references: [id])
  tagsId                   String?                 @db.ObjectId
  review                   review[]
}

model tags {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  impressions Int      @default(0)
  clicks      Int      @default(0)
  order       Order[]  @relation("OrderToTags")
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model OrderExtensionRequest {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  orderId           String        @db.ObjectId
  requestedByClient Boolean
  days              Int
  amount            String
  reason            String?
  paymentStatus     PaymentStatus @default(PENDING)
  adminApproved     Boolean?
  userApproved      Boolean?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id])
}

model Payment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  userId    String        @db.ObjectId
  stripeId  String        @unique
  status    PaymentStatus @default(PENDING)
  amount    String
  currency  String
  createdAt DateTime      @default(now())
  orderId   String        @db.ObjectId

  user  User  @relation(fields: [userId], references: [id])
  Order Order @relation(fields: [orderId], references: [id])
}

model Visitors {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  status    VisitorStatus @default(NEW_CLIENT)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum VisitorStatus {
  NEW_CLIENT
  REPEATED_CLIENT
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum Role {
  ADMIN
  USER
  SUPER_ADMIN
  SUB_ADMIN
}

enum trackProjectStatus {
  PROJECT_PLACED
  REQUIREMENTS_SUBMITTED
  PROJECT_RUNNING
  REVIEW_DELIVERY
  COMPLETE_PROJECT
  PENDING
  CANCELLED
}

enum ProjectStatus {
  Waiting
  Ongoing
  Revision
  Dispute
  Delivered
  Canceled
  Completed
}

enum ProjectType {
  OFFER //banner
  CUSTOM // inbox
  DIRECT //single
  MD_PROJECT //multi
}

enum senderType {
  CLIENT
  OWNER
}
