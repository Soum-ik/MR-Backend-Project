// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  fullName         String?
  userName         String            @unique
  email            String            @unique
  password         String?
  country          String?
  city             String?
  industryName     String?
  address          String?
  number           String?
  image            String?
  description      String?
  language         String?
  role             Role              @default(USER) // Set a default role, if needed
  otp              Int?              @default(0)
  createdAt        DateTime          @default(now())
  updateAt         DateTime          @updatedAt
  SocialMediaLinks SocialMediaLinks?
  CreateProject    CreateProject[]

  @@map("Users")
}

model SocialMediaLinks {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  facebook  String?
  instagram String?
  linkedin  String?
  twitter   String?
  pinterest String?
  google    String?
  tumblr    String?
  youtube   String?
  yelp      String?
  tiktok    String?
  nextdoor  String?
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])

  @@map("SocialMediaLinks")
}

model CreateProject {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  projectImage            String?
  originalAmount          Int?
  offerAmount             Int?
  extraFastDelivery       Int?
  extraFastDeliveryAmount Int?
  providedSource          String[] @default([])
  requirement             String[] @default([])

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  designId String? @db.ObjectId
  Design   Design? @relation(fields: [designId], references: [id], onDelete: Cascade) // Fixed redundant Design relation

  @@map("CreateProjectAdmin")
}

model Design {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String // e.g., "Door Hanger", "Poster", etc.

  CreateProjects CreateProject[] // Fixed the relation to be plural for multiple projects

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DesignOptions DesignOption[] // Pluralized for clarity
}

model DesignOption {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  type String[]

  designId String
  design   Design @relation(fields: [designId], references: [id], onDelete: Cascade)
}

model Category {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  categoryName String        @unique
  image        Json?
  bulletPoint  String[]      @default([])
  requirements String[]      @default([])
  subCategory  subCategory[]

  @@map("Categorys")
}

model subCategory {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  subTitle            String
  subAmount           Int
  regularDeliveryDays Int
  fastDeliveryDays    Int
  fastDeliveryPrice   Int
  categoryId          String   @db.ObjectId
  category            Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}
