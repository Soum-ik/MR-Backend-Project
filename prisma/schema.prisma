// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  fullName         String?
  userName         String            @unique
  email            String            @unique
  password         String?
  country          String?
  city             String?
  industryName     String?
  address          String?
  number           String?
  image            String?
  description      String?
  language         String?
  role             Role              @default(USER) // Set a default role, if needed
  otp              Int?              @default(0)
  createdAt        DateTime          @default(now())
  updateAt         DateTime          @updatedAt
  SocialMediaLinks SocialMediaLinks?
  contactForChat   contactForChat[]
  totalOrder       Int?              @default(0)
  QuickResponse    QuickResponse[]
  book_mark        Boolean           @default(false)

  // Relation to Message
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  contactForChatId String?   @db.ObjectId

  @@map("Users")
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userImage      String?
  senderName     String?
  senderUserName String?
  senderId       String
  recipientId    String
  messageText    String
  attachment     String?
  createdAt      DateTime @default(now())
  replyTo        String?
  isFromAdmin    String
  customOffer    String?
  msgDate        String?
  msgTime        String
  contactForm    Json?

  sender    User @relation("SentMessages", fields: [senderId], references: [id])
  recipient User @relation("ReceivedMessages", fields: [recipientId], references: [id])

  @@map("Messages")
}

model contactForChat {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String
  website       String
  exampleDesign Json?
  messageText   String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model QuickResponse {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@map("quick_response")
}

model SocialMediaLinks {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  facebook  String?
  instagram String?
  linkedin  String?
  twitter   String?
  pinterest String?
  google    String?
  tumblr    String?
  youtube   String?
  yelp      String?
  tiktok    String?
  nextdoor  String?
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@map("SocialMediaLinks")
}

model CreateOfferProject {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  projectImage            Json?
  originalAmount          String?
  offerAmount             String?
  delivery                String?
  extraFastDelivery       String?
  extraFastDeliveryAmount String?
  bullPoints              String[] @default([])
  requirements            String[] @default([])

  freeDesignName        String
  freeDesignTypographys String[] @default([])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  designs Json[] @default([])

  @@map("CreateOfferProject")
}

model Category {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  categoryName String        @unique
  image        Json?
  bulletPoint  String[]      @default([])
  requirements String[]      @default([])
  subCategory  subCategory[]
  createdAt    DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  order        Int

  @@map("Categorys")
}

model subCategory {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  subTitle            String?
  subAmount           String?
  regularDeliveryDays String?
  fastDeliveryDays    String?
  fastDeliveryPrice   String?
  categoryId          String  @db.ObjectId

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  category  Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Restrict)
}

model UploadDesign {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String

  category    String
  subCategory String

  size           String
  fileFormat     String
  images         Json[]
  tags           String[] @default([])
  relatedDesigns String[] @default([])
  createdAt      DateTime @default(now())
  updateAt       DateTime @updatedAt

  folder String?
  // folders Folders? @relation(fields: [folder], references: [name], onUpdate: Cascade, onDelete: Restrict)

  subFolder String?
  // SubFolders SubFolders? @relation(fields: [subFolder], references: [name], onUpdate: Cascade, onDelete: Restrict)

  industrys String[]
  // Industrys Industrys? @relation(fields: [industrys], references: [name], onUpdate: Cascade, onDelete: Restrict)

  designs String[]
  // Designs Designs? @relation(fields: [designs], references: [name], onUpdate: Cascade, onDelete: Restrict)

  designId String @unique
}

//Start - Here You will get the schema for home page feature category reordering

model FeatureAllFolder {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  slug   String @unique
  folder String
  order  Int
}

//End - Here You will get the schema for home page feature category reordering

model Folders {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name      String   @unique
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model SubFolders {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name      String   @unique
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Industrys {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name      String[]
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Designs {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name      String[]
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model desigserialNumberGenerator {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  serialnumber String?  @unique
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
}

model projectSerialNumberGenerator {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  serialnumber String?  @unique
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
}

//Start - Here You will get the schema for multi-project

model MultiProject {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  projectTitle String
  projectImage Json // Use Json to store image metadata
  requirements String[] // This will be stored as an array of strings
}

//End - Here You will get the schema for multi-project

enum Role {
  ADMIN
  USER
}
